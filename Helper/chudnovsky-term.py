# This program calculates chudnovsky "term" value then compares it to a reference value.
# The perpose being to compare the results with one calculated in another language (c++)

from mpmath import mp
import sys
sys.set_int_max_str_digits(10000)  # Increase the limit for string conversion from 4300 to 10,000 digits

# Set precision (slightly higher than your working precision)
mp.dps = 100000  # Decimal places, roughly equivalent to ~33220 bits

k0_calc_term=mp.mpfe7")

k1_calc_term=mp.mpf("-2.55383735543025290976688573251606579768960909444031755662186004895380007841309653557260235007654732783817843772980469089391537014651319904821424259439967436439767089984734523415891784976709729750987489306549759285433665515797958025019207670960405213006529798778666691115974365082106233434909280717599402606837862751620772282045124244534374506891985040089587421665736717912375912110852648873346743765126143968798058317879684773341447226407288358694777767428684181286348989093823820265009309745273616901276207618756625042622705843876963416667815349031464111605574919488880198106581523016011031068123135321151390136109310185725109269048836300291233393947628921652376580640057361334969374544281497724255136887783766401599828257542514539112612429507340305348330954152014994228409839654587148380244953837997006762351774728781808859256744333534355274629804910951164426118606947358925224549391847116765533236399781373553666663061202567364377589412142528423949941072941041098453865224457662010680263842703030446719207343738982803590139248074684511210465330254312673972746316718591284539902830259999452039851261714001304827529921367067133828024200951918383367171918821931496453955289542474719871343740896930963244794004991409890982182253610121827965415673931670086875662588510834541497992569963378388637829478829917316733173025989599480331193027023295660659353517626003585415936584993079562722109848304892701240501729374578385316414093384800998228807991627963335071396185291000008575754934709764953407453145515935316883694880297931019984516858826052194815374302663356180379376128727390352837055994112204110417265774586630891865703683713454073335260348864534006980956578542133321100591621985730961511295553009908435788751476747676989165050926176908638588524691745297658071487008612888331759500887573037153545187415792600827334302941443840289005794517751759731863435981967133326913742535026341401263760735917601567457937304657792654591397877810950481338762042697077106195742101766306452870066940430390723567806773538636045262742433634879650160661431087213185925320926379071492660006558574718171881708754102067727595053257873864141155927224573230820774069462657158586419286432583888924623385338874760535766603203271864349169001577236836620287498958402240467817642614369279976279438635432944179593357246662900995498143536650104413719846888067751460986455644068856707787181299191840183445713822050842969656931988111724830446741448964623659921794409549644070467540330041248055725214377557229191096807816781863641042971804933374762208943083391482347443139415092407642344200985078618140690531417389036975585260797909379898378835475362994551506452372663418827611534635943665714186476431222533229353231484180961486526475206518008697632277272678992343156134388422058796708082994856958045855562508832923676188844132644328507411960436947755601163085049965878077229862524163129368080462075530090457304938306673142992320132686830222957043439189006668343857122879855915874269700263046520401626444063867844823897055890385372166423069058307860845547561890798938257060848649257021443910923001816159024117535730238153125417260905019634170890581688170155927470579037575536134449283221399324560990178419612993497556917269213613011621107995722780537642785023171127802054675470530766518331268533956256581191245166167967776588289152980128927389703786119268534481967620283613414632538540955593575322385732696357724557825128368872273888852270718612508438134905485825284518530654555359712092656981024145890426923558166715856407656727115823836487912785326432258622068897773907196553034633704338884206484757474409684980963608242309902383708911053772437133250719341292215789492392318541399954201057768279122885295003163340740987545348694503555202716578694185129330384284618560659512915909010438096400522154326828742473878733681193107733419931571017304334143371293762963820326274865454884224318493492850792486569431864308460095473161141482774583358677641609519807947033513461293774185729045361956912493331019410952635406045298093131071283130458054683127040258940514989761550978648599242355959388652984110514522316818719017831649275121405391468577857846264985592089548411210682017560810361654645495565699090144752875853468797220887153951096996937958234562235945085133992025825493387570417023206121285579900803172151792800435771915243726488067566788134261658299524281646877912766555852208977894898109425417540947246227605515244546058097741557095970527593717412643760200298931353733518003639348497287776806796228459290191687413839719114808486274871925173936224564243183971124936255523905466930016594229957317277351350301366305729006405420938725530043446606250239127847602819088302877071197540656959375634896007861839343622328871992566047505135911342910138691494971584957004327635675219459936098467732538085002365439441462545155175552145720366142296902156301817278182041141983413249817409865916549505090666494122612178008527180582674653441014066459633946048014199434197353392621354328413963453295721015024736499819803367618571008606512400439226780354479667095296774978039610182763266754572666726089238234957732403725392566639941037657742513216073164047047248336178573963102552099548783151242175411346150338461285433577897291442630311130242499677328936139422644448915459567938983125082659308407574918390278924105863260199023408095422868118742938020922233705151714351542957612420290547408440464546776367298429835512051559183548844174162020825475914418252318530683536865713338598883558175208111654533444975636133450769241379653330092407153702530033838900016570269665727875183102973814160526862540975772791361392790848959325436231659657240438954084602663292488465024553343441760609834570691804952381238237667166220586059693341959592473849920672319776012109854134893327072534228372702887594854161667520698103880514055546074971043946426020656196959830509742525091750739441314604676866866465543477318221744052834989882329719937512563028845389902498152160333111063529768816507405409268614450704528372706594531668274520554743154142078381601052422876236934560928070378263811787177417018013039803263622143659949562736229907624104386888364239007264318198555478e-7")

# Get string lengths of the reference values
len_k0 = len(str(k0_calc_term))
len_k1 = len(str(k1_calc_term))

#print(f"Length of k0_calc_term: {len_k0} digits")
#print(f"Length of k1_calc_term: {len_k1} digits")

# Define the Chudnovsky term function
def chudnovsky_term(k):
    from mpmath import factorial
    C = 426880 * mp.sqrt(10005)
    num = (-1)**k * factorial(6*k) * (545140134*k + 13591409)
    denom = factorial(3*k) * (factorial(k)**3) * (640320**(3*k))
    return mp.mpf(num) / mp.mpf(denom)

# Compute and print terms for k=0 and k=1
term_k0 = chudnovsky_term(0)
term_k1 = chudnovsky_term(1)

## Truncate computed values to match C++ reference lengths
#trunc_term_k0 = mp.nstr(term_k0, len_k0)
#trunc_term_k1 = mp.nstr(term_k1, len_k1)

# Convert to string and match length manually
trunc_term_k0 = str(term_k0)[:len_k0]
trunc_term_k1 = str(term_k1)[:len_k1]

# Get string lengths of the truncated values
#len_trunc_k0 = len(str(trunc_term_k0))
#len_trunc_k1 = len(str(trunc_term_k1))

# Get lengths of the truncated values
len_trunc_k0 = len(trunc_term_k0)
len_trunc_k1 = len(trunc_term_k1)

print(f"Length of k0_trunc_term: {len_k0} digits")
print(f"C++ term when k=0: {len_trunc_k0} digits")
print(f"Length of k1_trunc_term: {len_k1} digits")
print(f"C++ term when k=1: {len_trunc_k1} digits")
print("\n**********************************************************************************************************************\n")
print(f"Ref Term when k=1:\n{trunc_term_k1}")
print(f"C++ term when k=1:\n{k1_calc_term}")

# Compare truncated Python and C++ values
if trunc_term_k0 == str(k0_calc_term)[:len_k0]:
    print("k=0 Values match!")
else:
    print("k=0 Values do not match!")

if trunc_term_k1 == str(k1_calc_term)[:len_k1]:
    print("k=1 Values match!")
else:
    print("k=1 Values do not match!")
